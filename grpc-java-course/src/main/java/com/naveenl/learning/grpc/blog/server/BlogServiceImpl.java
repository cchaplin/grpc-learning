package com.naveenl.learning.grpc.blog.server;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.result.DeleteResult;
import com.proto.blog.*;
import io.grpc.Status;
import io.grpc.stub.StreamObserver;
import org.bson.Document;
import org.bson.types.ObjectId;

import static com.mongodb.client.model.Filters.eq;

public class BlogServiceImpl extends BlogServiceGrpc.BlogServiceImplBase {

    private MongoClient mongoClient = MongoClients.create("mongodb+srv://varun:Varun@cluster0-rs0pl.azure.mongodb.net/test?retryWrites=true&w=majority");
    private MongoDatabase db = mongoClient.getDatabase("mydb");
    private MongoCollection<Document> collection = db.getCollection("blog");
    @Override
    public void createBlog(CreateBlogRequest request, StreamObserver<CreateBlogResponse> responseObserver) {

        Blog blog = request.getBlog();
        Document doc = new Document("author_id", blog.getAuthorId())
                .append("title",blog.getTitle())
                .append("content",blog.getContent());

        collection.insertOne(doc);

        // We retrieve the mongo generated Id
        String id = doc.getObjectId("_id").toHexString();

        System.out.println("Inserted Blog: " + id);

        // Create a response by copying the input Blog messge and set the Id with the one
        // generated by mongo
        //
        CreateBlogResponse response = CreateBlogResponse.newBuilder()
                .setBlog(blog.toBuilder().setId(id).build())
                .build();

        responseObserver.onNext(response);
        responseObserver.onCompleted();
    }

    @Override
    public void readBlog(ReadBlogRequest request, StreamObserver<ReadBlogResponse> responseObserver) {

        System.out.println("Received Read blog request");
        String blogId = request.getBlogId();

        Document result = null;

        try {
            result = collection.find(eq("_id",new ObjectId(blogId)))
                    .first();
        } catch (Exception e) {
            responseObserver.onError(
                    Status.NOT_FOUND
                            .withDescription("The blog with corresponding ID was not found")
                            .augmentDescription(e.getLocalizedMessage())
                            .asRuntimeException()
            );
        }

        if (result == null) {
            System.out.println("Blog not found");
            responseObserver.onError(
                    Status.NOT_FOUND
                    .withDescription("The blog with corresponding ID was not found")
                            .augmentDescription("Id = " + blogId)
                            .asRuntimeException()
            );
        } else {

            Blog blog = documentToBlog(result);

            responseObserver.onNext(
                    ReadBlogResponse.newBuilder()
                            .setBlog(blog)
                            .build()
            );

            System.out.println("Sending Response now");
            responseObserver.onCompleted();

        }
    }

    private Blog documentToBlog(Document result) {

        String blogId = result.getObjectId("_id").toString();
        return Blog.newBuilder()
                .setAuthorId(result.getString("author_id"))
                .setTitle(result.getString("title"))
                .setId(blogId)
                .setContent(result.getString("content"))
                .build();
    }

    @Override
    public void updateBlog(UpdateBlogRequest request, StreamObserver<UpdateBlogResponse> responseObserver) {
        String blogId = request.getBlog().getId();
        System.out.println("Received update blog request");
        Document result = null;

        try {
            result = collection.find(eq("_id",new ObjectId(blogId)))
                    .first();
        } catch (Exception e) {
            responseObserver.onError(
                    Status.NOT_FOUND
                            .withDescription("The blog with corresponding ID was not found")
                            .augmentDescription(e.getLocalizedMessage())
                            .asRuntimeException()
            );
        }

        if (result == null) {
            System.out.println("Blog not found");
            responseObserver.onError(
                    Status.NOT_FOUND
                            .withDescription("The blog with corresponding ID was not found")
                            .augmentDescription("Id = " + blogId)
                            .asRuntimeException()
            );
        } else {
            Blog blog = request.getBlog();
            Document replacementDoc = new Document("author_id", blog.getAuthorId())
                    .append("title", blog.getTitle())
                    .append("content", blog.getContent())
                    .append("_id", new ObjectId(blogId));

            System.out.println("Replacing blog in mongoDB");
            System.out.println(replacementDoc.toString());

            collection.replaceOne(eq("_id",result.getObjectId("_id")),replacementDoc);

            responseObserver.onNext(UpdateBlogResponse.newBuilder()
                    .setBlog(documentToBlog(replacementDoc))
                    .build());

            responseObserver.onCompleted();
        }

    }

    @Override
    public void deleteBlog(DeleteBlogRequest request, StreamObserver<DeleteBlogResponse> responseObserver) {
        System.out.println("Received delete blog request");
        String blogId = request.getBlogId();

        DeleteResult res = null;
        try {
            res = collection.deleteOne(eq("_id", new ObjectId(blogId)));
        } catch (Exception e) {
            System.out.println("blog not found");
            responseObserver.onError(
                    Status.NOT_FOUND
                            .withDescription("The blog with corresponding ID was not found")
                            .augmentDescription(e.getLocalizedMessage())
                            .asRuntimeException()
            );
        }
        System.out.println("Num deleted = ["+ res.getDeletedCount() + "]");

        if (res.getDeletedCount() == 0) {
            System.out.println("Blog not found");
            responseObserver.onError(
                    Status.NOT_FOUND
                            .withDescription("The blog with corresponding ID was not found")
                            .augmentDescription("Id = " + blogId)
                            .asRuntimeException()
            );
        } else {
            System.out.println("Blog deleted");
            responseObserver.onNext(DeleteBlogResponse.newBuilder()
                    .setBlogId(blogId)
                    .build());

            responseObserver.onCompleted();
        }
    }

    @Override
    public void listBlog(ListBlogRequest request, StreamObserver<ListBlogResponse> responseObserver) {
        System.out.println("Received ");
        collection.find().iterator().forEachRemaining(document -> {
            responseObserver.onNext(
                    ListBlogResponse.newBuilder().setBlog(documentToBlog(document)).build()
            );
        });

        responseObserver.onCompleted();
    }
}
